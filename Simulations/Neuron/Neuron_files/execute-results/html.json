{
  "hash": "0e71e0dfdf0cb1df4a595dffdb714330",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: NEURON simulator\n---\n\n\n\n[NEURON simulator](https://nrn.readthedocs.io/en/8.2.6/) excels at simulating complex, multi-compartmental models with detailed biophysics. The NEURON simulator is widely used in the simulation of detailed neural mechanisms and networks of neurons in the neuroscience literature. The original programming language used to code the NEURON is Higher Order Calculator (HOC). NEURON may also be programmed in Python, which we will explore more in this series of writings.\n\n## Installation of NEURON with GPU support (CoreNEURON)\n\n### 1. Clone the latest version of NEURON\n\n```{bash}\ngit clone https://github.com/neuronsimulator/nrn\ncd nrn\n```\n\n### 2. Build\n\n```{bash}\nmkdir build\ncd build\n```\n\n### 3. Load the modules\n\n```{bash}\nmodule load intel openmpi python cmake nvidia-hpc-sdk cuda  \n```\n\nIn normal Linux systems, the modules are in the path `/usr/share/modules/modulefiles`. If the directory does not exists, then install using\n\n```{bash}\n\nsudo apt-get install environment-modules\n\n# and configure the ~/.bashrc with \nsource /etc/profile.d/modules.sh\n\n```\n\n### 4. Compile\n\n```{bash}\ncmake .. \\\n      -DNRN_ENABLE_CORENEURON=ON \\\n      -DCORENRN_ENABLE_GPU=ON \\\n      -DNRN_ENABLE_INTERVIEWS=OFF \\\n      -DNRN_ENABLE_RX3D=OFF \\\n      -DCMAKE_INSTALL_PREFIX=$HOME/install \\\n      -DCMAKE_C_COMPILER=nvc \\\n      -DCMAKE_CXX_COMPILER=nvc++ \\\n      -DCMAKE_PREFIX_PATH=/usr/lib/x86_64-linux-gnu \\\n      -DCMAKE_CUDA_ARCHITECTURES=\"61\" \\  # need to know this\n      -DCMAKE_EXE_LINKER_FLAGS: \"-cuda -gpu=cuda12.6,lineinfo,cc61 -acc\" # not necessary\n      -DCMAKE_CXX_FLAGS=\"-O3 -g\" \\\n      -DCMAKE_C_FLAGS=\"-O3 -g\" \\\n      -DCMAKE_BUILD_TYPE=Custom\n```\n\nCheck the CUDA_ARCHITECTURES via (nvidia-smi; assuming it is installed)\n\n```{bash}\nnvidia-smi --query-gpu=compute_cap --format=csv\n```\n\n### 5. Ringtest\n\nBest way to check if the installation is working properly is by running the ring test as in\n\n```{bash}\ngit clone https://github.com/nrnhines/ringtest.git\ncd ringtest\n\nnrnivmodl -coreneuron mod\n\n# in any NEURON code add the following lines for CoreNEURON support (python files only)\n\nh.cvode.cache_efficient(1)\nif use_coreneuron:\n    from neuron import coreneuron\n    coreneuron.enable = True\n    coreneuron.gpu = coreneuron_gpu\n    \n    \n#run the three performance test \n\n# NEURON CPU Run\nmpiexec -n 1 ./x86_64/special -mpi -python ringtest.py -tstop 10 -nring 128 -ncell 128 -branch 32 64\n\n# CoreNEURON CPU Run\nmpiexec -n 1 ./x86_64/special -mpi -python ringtest.py -tstop 10 -nring 128 -ncell 128 -branch 32 64 -coreneuron\n\n# CoreNEURON GPU Run\nmpiexec -n 1 ./x86_64/special -mpi -python ringtest.py -tstop 10 -nring 128 -ncell 128 -branch 32 64 -coreneuron -gpu\n```\n\n\n",
    "supporting": [
      "Neuron_files"
    ],
    "filters": [],
    "includes": {}
  }
}